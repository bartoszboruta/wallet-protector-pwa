{"version":3,"sources":["containers/Category/Context.js","containers/Form/Context.js","components/Layout/Menu.js","components/Layout/Header.js","components/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["CategoryContext","React","createContext","CategoryProvider","_ref","children","_useState","useState","_useState2","Object","_Users_bartoszboruta_projects_wallet_protector_pwa_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","categories","setCategories","_useState3","_useState4","categoryId","setCategoryId","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Provider","value","FormContext","FormProvider","cost","setCost","Menu","react_default","BurgerMenu","outerContainerId","pageWrapId","NavLink","exact","to","Header","Category","lazy","Promise","all","__webpack_require__","e","then","bind","Form","Settings","Stats","withRouter","id","lib","autoClose","Layout_Menu","Layout_Header","Switch","react","fallback","className","Category_Context","Context","Route","component","path","App","BrowserRouter","components_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0967c6bf.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport propTypes from 'prop-types'\n\nexport const CategoryContext = React.createContext({})\n\nexport const CategoryProvider = ({ children }) => {\n  const [categories, setCategories] = useState([])\n  const [categoryId, setCategoryId] = useState(0)\n\n  return (\n    <CategoryContext.Provider value={{ categories, setCategories, categoryId, setCategoryId }}>\n      {children}\n    </CategoryContext.Provider>\n  )\n}\n\nCategoryProvider.propTypes = {\n  children: propTypes.func,\n}\n","import React, { useState } from 'react'\nimport propTypes from 'prop-types'\n\nexport const FormContext = React.createContext({})\n\nexport const FormProvider = ({ children }) => {\n  const [cost, setCost] = useState(0)\n\n  return <FormContext.Provider value={{ cost, setCost }}>{children}</FormContext.Provider>\n}\n\nFormProvider.propTypes = {\n  children: propTypes.func,\n}\n","import React from 'react'\nimport { slide as BurgerMenu } from 'react-burger-menu'\nimport { NavLink } from 'react-router-dom'\n\nconst Menu = () => (\n  <BurgerMenu outerContainerId={'outer-container'} pageWrapId={'page-wrap'}>\n    <NavLink exact to=\"/\">\n      Form\n    </NavLink>\n    <NavLink to=\"/stats\">Stats</NavLink>\n    <NavLink to=\"/settings\">Settings</NavLink>\n    <NavLink to=\"/category\">Category</NavLink>\n  </BurgerMenu>\n)\n\nexport default Menu\n","import React from 'react'\n\nconst Header = () => {\n  return <header>Header</header>\n}\n\nexport default Header\n","import React, { lazy, Suspense } from 'react'\nimport { Route, Switch, withRouter } from 'react-router-dom'\nimport { ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.min.css'\n\nimport Menu from './Menu'\nimport Header from './Header'\nimport { FormProvider } from 'containers/Form/Context'\nimport { CategoryProvider } from '../../containers/Category/Context'\n\nconst Category = lazy(() => import('containers/Category'))\nconst Form = lazy(() => import('containers/Form'))\nconst Settings = lazy(() => import('containers/Settings'))\nconst Stats = lazy(() => import('containers/Stats'))\n\nconst Layout = () => (\n  <div id=\"outer-container\">\n    <ToastContainer autoClose={3000} />\n    <Menu />\n    <Header />\n    <Switch>\n      <Suspense fallback={<div>Loading...</div>}>\n        <main id=\"page-wrap\">\n          <div className=\"container\">\n            <CategoryProvider>\n              <FormProvider>\n                <Route component={Form} exact path=\"/\" />\n              </FormProvider>\n              <Route component={Category} path=\"/category\" />\n            </CategoryProvider>\n            <Route component={Settings} path=\"/settings\" />\n            <Route component={Stats} path=\"/stats\" />\n          </div>\n        </main>\n      </Suspense>\n    </Switch>\n  </div>\n)\n\nexport default withRouter(Layout)\n","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport Layout from 'components/Layout'\n\nconst App = () => (\n  <Router>\n    <Layout />\n  </Router>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'styles/index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}